<?php
//----------------------------------------------------------------------------------------------------------------------
namespace SetBased\Abc;

use SetBased\Abc\Babel\Babel;
use SetBased\Abc\BlobStore\BlobStore;
use SetBased\Abc\CanonicalHostnameResolver\CanonicalHostnameResolver;
use SetBased\Abc\DomainResolver\DomainResolver;
use SetBased\Abc\Error\InvalidUrlException;
use SetBased\Abc\Error\NotAuthorizedException;
use SetBased\Abc\ErrorLogger\ErrorLogger;
use SetBased\Abc\Helper\HttpHeader;
use SetBased\Abc\Helper\WebAssets;
use SetBased\Abc\Mail\MailMessage;
use SetBased\Abc\Obfuscator\Obfuscator;
use SetBased\Abc\Obfuscator\ObfuscatorFactory;
use SetBased\Abc\Page\Page;
use SetBased\Abc\RequestHandler\RequestHandler;
use SetBased\Abc\RequestLogger\RequestLogger;
use SetBased\Abc\RequestParameterResolver\RequestParameterResolver;
use SetBased\Stratum\Exception\ResultException;

/**
 * The main helper class for the ABC Framework.
 */
abstract class Abc
{
  //--------------------------------------------------------------------------------------------------------------------
  /**
   * The data layer generated by PhpStratum.
   *
   * @var Object
   */
  public static $DL;

  /**
   * The helper object for web assets.
   *
   * @var WebAssets
   */
  public static $assets;

  /**
   * The Babel object for retrieving linguistic entities.
   *
   * @var Babel
   */
  public static $babel;

  /**
   * The helper object for deriving the canonical hostname.
   *
   * @var CanonicalHostnameResolver
   */
  public static $canonicalHostnameResolver;

  /**
   * The helper object for deriving the domain (a.k.a. company name).
   *
   * @var DomainResolver
   */
  public static $domainResolver;

  /**
   * The helper object for handling the HTTP page request.
   *
   * @var RequestHandler
   */
  public static $requestHandler;

  /**
   * The helper object for logging HTTP page requests.
   *
   * @var RequestLogger
   */
  public static $requestLogger;

  /**
   * The helper object for resolving the CGI parameters from a clean URL.
   *
   * @var RequestParameterResolver
   */
  public static $requestParameterResolver;

  /**
   * The start time of serving the page request.
   *
   * @var float
   */
  public static $time0;

  /**
   * The factory for creating Obfuscators.
   *
   * @var ObfuscatorFactory
   */
  protected static $obfuscatorFactory;

  /**
   * A reference to the singleton instance of this class.
   *
   * @var Abc
   */
  private static $instance;

  /**
   * Information about the requested page.
   *
   * @var array
   */
  public $pageInfo;

  /**
   * Information about the session.
   *
   * @var array
   */
  public $sessionInfo;

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Object constructor.
   */
  protected function __construct()
  {
    self::$instance = $this;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * De-obfuscates an obfuscated database ID.
   *
   * @param string $code  The obfuscated database ID.
   * @param string $alias An alias for the column holding the IDs.
   *
   * @return int
   */
  public static function deObfuscate($code, $alias)
  {
    return self::$obfuscatorFactory->decode($code, $alias);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the singleton instance of this class.
   *
   * @return Abc The singleton instance.
   */
  public static function getInstance()
  {
    return self::$instance;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns an Obfuscator for obfuscating and de-obfuscating database IDs.
   *
   * @param string $alias An alias for the column holding the IDs.
   *
   * @return Obfuscator
   */
  public static function getObfuscator($alias)
  {
    return self::$obfuscatorFactory->getObfuscator($alias);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Obfuscates a database ID.
   *
   * @param int    $id    The database ID.
   * @param string $alias An alias for the column holding the IDs.
   *
   * @return string
   */
  public static function obfuscate($id, $alias)
  {
    return self::$obfuscatorFactory->encode($id, $alias);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Check exist info for current page. If exist return true, otherwise false.
   *
   * {@deprecated}
   */
  public function checkPageInfo()
  {
    if (!empty($this->pageInfo)) return true;

    return false;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Creates an empty mail message.
   *
   * @return MailMessage
   */
  abstract public function createMailMessage();

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the BLOB Store object.
   *
   * @return BlobStore
   */
  abstract public function getBlobStore();

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the ID of the domain (a.k.a. company) of the requestor.
   *
   * {@deprecated}
   *
   * @return int
   */
  public function getCmpId()
  {
    return $this->sessionInfo['cmp_id'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns stateful double submit token to prevent CSRF attacks.
   *
   * {@deprecated}
   *
   * @return string
   */
  public function getCsrfToken()
  {
    return $this->sessionInfo['ses_csrf_token'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the error logger.
   *
   * @return ErrorLogger
   */
  abstract public function getErrorLogger();

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the code of the preferred language of the requestor.
   *
   * {@deprecated}
   *
   * @return string
   */
  public function getLanCode()
  {
    return $this->sessionInfo['lan_code'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the ID of the preferred language of the requestor.
   *
   * {@deprecated}
   *
   * @return int
   */
  public function getLanId()
  {
    return $this->sessionInfo['lan_id'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns ID of the menu item associated with the requested page.
   *
   * {@deprecated}
   *
   * @return int
   */
  public function getMnuId()
  {
    return $this->pageInfo['mnu_id'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the ID of the requested page.
   *
   * {@deprecated}
   *
   * @return int
   */
  public function getPagId()
  {
    return $this->pageInfo['pag_id'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the ID of the "original" page.
   *
   * {@deprecated}
   *
   * @return int
   */
  public function getPagIdOrg()
  {
    return $this->pageInfo['pag_id_org'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns page group title.
   *
   * {@deprecated}
   *
   * @return string
   */
  public function getPageGroupTitle()
  {
    return $this->pageInfo['ptb_title'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns true if the current user is authorized the request a page.
   *
   * {@deprecated}
   *
   * @param int $pagId The ID of the page.
   *
   * @return bool
   */
  public function getPathAuth($pagId)
  {
    return self::$DL->abcAuthGetPageAuth($this->sessionInfo['cmp_id'], $this->sessionInfo['pro_id'], $pagId);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the profile ID of the requestor.
   *
   * {@deprecated}
   *
   * @return int
   */
  public function getProId()
  {
    return $this->sessionInfo['pro_id'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns page group title.
   *
   * {@deprecated}
   *
   * @return string
   */
  public function getPtbId()
  {
    return $this->pageInfo['ptb_id'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the ID of the session.
   *
   * {@deprecated}
   *
   * @return int
   */
  public function getSesId()
  {
    return $this->sessionInfo['ses_id'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the session info.
   *
   * {@deprecated}
   *
   * @return array
   */
  public function getSessionInfo()
  {
    return $this->sessionInfo;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the user ID of the requestor.
   *
   * {@deprecated}
   *
   * @return int
   */
  public function getUsrId()
  {
    return $this->sessionInfo['usr_id'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Handles the actual page request including authorization and security checking, transaction handling,
   * request logging, and exception handling.
   */
  public function handlePageRequest()
  {
    // Start output buffering.
    ob_start();

    try
    {
      // Get the CGI variables from a clean URL.
      self::$requestParameterResolver->resolveRequestParameters();

      // Retrieve the session or create an new session.
      $this->getSession();

      // Test the user is authorized for the requested page.
      $this->checkAuthorization();

      self::$assets->setPageTitle($this->pageInfo['pag_title']);

      $page_class = $this->pageInfo['pag_class'];
      try
      {
        /** @var Page $page */
        $page = new $page_class();
      }
      catch (ResultException $e)
      {
        // A ResultException during the construction of a page object is (almost) always caused by an invalid URL.
        throw new InvalidUrlException('No data found', $e);
      }

      // Perform addition authorization and security checks.
      $page->checkAuthorization();

      $uri = $page->getPreferredUri();
      if (isset($uri) && $uri!=$_SERVER['REQUEST_URI'])
      {
        // The preferred URI differs from the requested URI. Redirect the user agent to the preferred URL.
        self::$DL->rollback();
        HttpHeader::redirectMovedPermanently($uri);
      }
      else
      {
        // Echo the page content.
        $page->echoPage();

        // Flush the page content.
        if (ob_get_level()) ob_flush();
      }
    }
    catch (NotAuthorizedException $e)
    {
      // The user has no authorization for the requested URL.
      $this->handleNotAuthorizedException($e);
    }
    catch (InvalidUrlException $e)
    {
      // The URL is invalid.
      $this->handleInvalidUrlException($e);
    }
    catch (\Throwable $e)
    {
      // Some other exception has occurred.
      $this->handleException($e);
    }

    $this->updateSession();
    if (self::$requestLogger!==null)
    {
      self::$requestLogger->logRequest(HttpHeader::$status);
    }

    self::$DL->commit();
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns true if the requestor is anonymous. Returns false otherwise.
   *
   * {@deprecated}
   *
   * @return bool
   */
  public function isAnonymous()
  {
    return (!empty($this->sessionInfo['usr_anonymous']));
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the URL of the login page.
   *
   * @param string|null $url The requested URL. After a successful login the user agent must be redirected to this URL.
   *
   * @return string
   */
  abstract public function getLoginUrl($url);

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Handles any other caught exception.
   *
   * @param \Throwable $throwable The caught \Throwable.
   */
  protected function handleException($throwable)
  {
    self::$DL->rollback();

    // Set the HTTP status to 500 (Internal Server Error).
    HttpHeader::serverErrorInternalServerError();

    $logger = $this->getErrorLogger();
    $logger->logError($throwable);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Handles a caught InvalidUrlException.
   *
   * @param InvalidUrlException $exception The caught exception.
   */
  protected function handleInvalidUrlException($exception)
  {
    self::$DL->rollback();

    // Set the HTTP status to 404 (Not Found).
    HttpHeader::clientErrorNotFound();
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Handles a caught NotAuthorizedException.
   *
   * @param NotAuthorizedException $exception The caught exception.
   */
  protected function handleNotAuthorizedException($exception)
  {
    if ($this->isAnonymous())
    {
      // The user is not logged on and most likely the user has requested a page for which the user must be logged on.
      self::$DL->rollback();
      // Redirect the user agent to the login page. After the user has successfully logged on the user agent will be
      // redirected to currently requested URL.

      HttpHeader::redirectSeeOther($this->getLoginUrl($_SERVER['REQUEST_URI']));
    }
    else
    {
      // The user is logged on and the user has requested an URL for which the user has no authorization.
      self::$DL->rollback();

      // Set the HTTP status to 404 (Not Found).
      HttpHeader::clientErrorNotFound();
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Retrieves information about the requested page and checks if the user has the correct authorization for the
   * requested page.
   */
  public function checkAuthorization()
  {
    if (isset($_GET['pag']))
    {
      $pagId    = self::deObfuscate($_GET['pag'], 'pag');
      $pagAlias = null;
    }
    else if (isset($_GET['pag_alias']))
    {
      $pagId    = null;
      $pagAlias = $_GET['pag_alias'];
    }
    else
    {
      $pagId    = C::PAG_ID_MISC_INDEX;
      $pagAlias = null;
    }

    $this->pageInfo = self::$DL->abcAuthGetPageInfo($this->sessionInfo['cmp_id'],
                                                    $pagId,
                                                    $this->sessionInfo['pro_id'],
                                                    $this->sessionInfo['lan_id'],
                                                    $pagAlias);
    if ($this->pageInfo===null)
    {
      if ($pagId!==null)
      {
        throw new NotAuthorizedException('User %d is not authorized for page ID=%d.',
                                         $this->sessionInfo['usr_id'],
                                         $pagId);
      }
      else
      {
        throw new NotAuthorizedException("User %d is not authorized for page alias='%s'.",
                                         $this->sessionInfo['usr_id'],
                                         $pagAlias);
      }
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Retrieves the session from the database based on the session cookie (ses_session_token) and sets the cookies
   * ses_session_token and ses_csrf_token.
   */
  public function getSession()
  {
    $cookie            = isset($_COOKIE['ses_session_token']) ? $_COOKIE['ses_session_token'] : null;
    $this->sessionInfo = self::$DL->abcSessionGetSession(self::$domainResolver->getDomain(), $cookie);

    if (isset($_SERVER['HTTPS']))
    {
      // Set session and CSRF cookies.
      setcookie('ses_session_token',
                $this->sessionInfo['ses_session_token'],
                false,
                '/',
                $_SERVER['HTTP_HOST'],
                true,
                true);
      setcookie('ses_csrf_token',
                $this->sessionInfo['ses_csrf_token'],
                false,
                '/',
                $_SERVER['HTTP_HOST'],
                true,
                false);
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Updates the session in the DB.
   */
  public function updateSession()
  {
    self::$DL->abcSessionUpdate($this->getSesId());
  }

  //--------------------------------------------------------------------------------------------------------------------
}

//----------------------------------------------------------------------------------------------------------------------
