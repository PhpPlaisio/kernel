<?php
//----------------------------------------------------------------------------------------------------------------------
namespace SetBased\Abc;

use SetBased\Abc\Obfuscator\Obfuscator;
use SetBased\Abc\Obfuscator\ObfuscatorFactory;
use SetBased\Stratum\MySql\StaticDataLayer;

//----------------------------------------------------------------------------------------------------------------------
/**
 * The main helper class for the ABC Abc.
 *
 * @todo Use composition for exception and request logging.
 */
abstract class Abc
{
  //--------------------------------------------------------------------------------------------------------------------
  /**
   * The data layer generated by PhpStratum.
   *
   * @var Object
   */
  public static $DL;

  /**
   * The factory for creating Obfuscators.
   *
   * @var ObfuscatorFactory
   */
  protected static $obfuscatorFactory;

  /**
   * @var Abc A reference to the singleton instance of this class.
   */
  private static $instance;

  /**
   * The canonical host name of the (virtual) web server.
   *
   * @var string
   */
  protected $canonicalServerName;

  /**
   * The domain (a.k.a. company abbreviation).
   *
   * @var string
   */
  protected $domain;

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Object constructor.
   *
   * @param StaticDataLayer   $dataLayer         The data layer generated by PhpStratum.
   * @param ObfuscatorFactory $obfuscatorFactory The factory for creating obfuscator objects.
   */
  protected function __construct($dataLayer, $obfuscatorFactory)
  {
    self::$instance = $this;

    self::$DL = $dataLayer;

    self::$obfuscatorFactory = $obfuscatorFactory;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * De-obfuscates an obfuscated database ID.
   *
   * @param string $code  The obfuscated database ID.
   * @param string $alias An alias for the column holding the IDs.
   *
   * @return int
   */
  public static function deObfuscate($code, $alias)
  {
    return self::$obfuscatorFactory->decode($code, $alias);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the singleton instance of this class.
   *
   * @return Abc The singleton instance.
   */
  public static function getInstance()
  {
    return self::$instance;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns an Obfuscator for obfuscating and de-obfuscating database IDs.
   *
   * @param string $alias An alias for the column holding the IDs.
   *
   * @return Obfuscator
   */
  public static function getObfuscator($alias)
  {
    return self::$obfuscatorFactory->getObfuscator($alias);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Obfuscates a database ID.
   *
   * @param int    $id    The database ID.
   * @param string $alias An alias for the column holding the IDs.
   *
   * @return string
   */
  public static function obfuscate($id, $alias)
  {
    return self::$obfuscatorFactory->encode($id, $alias);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the canonical server name of the (virtual) web server. This method is preferred over $_SERVER['HTTP_HOST']
   * and $_SERVER['SERVER_NAME'].
   *
   * @return string
   */
  public function getCanonicalServerName()
  {
    return $this->canonicalServerName;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the ID of the domain (a.k.a. company) of the requestor.
   *
   * @return int
   */
  public function getCmpId()
  {
    return $this->sessionInfo['cmp_id'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the domain of the page request.
   *
   * @return string
   */
  public function getDomain()
  {
    return $this->domain;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the code of the preferred language of the requestor.
   *
   * @return string
   */
  public function getLanCode()
  {
    return $this->sessionInfo['lan_code'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the ID of the preferred language of the requestor.
   *
   * @return int
   */
  public function getLanId()
  {
    return $this->sessionInfo['lan_id'];
  }

  //--------------------------------------------------------------------------------------------------------------------
}

//----------------------------------------------------------------------------------------------------------------------
