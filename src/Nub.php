<?php
declare(strict_types=1);

namespace Plaisio\Kernel;

use Plaisio\Authority\Authority;
use Plaisio\Babel\Babel;
use Plaisio\BlobStore\BlobStore;
use Plaisio\CanonicalHostnameResolver\CanonicalHostnameResolver;
use Plaisio\Cgi\Cgi;
use Plaisio\CompanyResolver\CompanyResolver;
use Plaisio\ConfigVault\ConfigVault;
use Plaisio\Dirs\Dirs;
use Plaisio\ErrorLogger\ErrorLogger;
use Plaisio\Event\EventDispatcher;
use Plaisio\ExceptionHandler\ExceptionHandler;
use Plaisio\LanguageResolver\LanguageResolver;
use Plaisio\Lock\EntityLock;
use Plaisio\Lock\NamedLock;
use Plaisio\Login\LoginHandler;
use Plaisio\Mail\MailMessage;
use Plaisio\Obfuscator\Obfuscator;
use Plaisio\Obfuscator\ObfuscatorFactory;
use Plaisio\Request\Request;
use Plaisio\RequestHandler\RequestHandler;
use Plaisio\RequestLogger\RequestLogger;
use Plaisio\RequestParameterResolver\RequestParameterResolver;
use Plaisio\Session\Session;
use Plaisio\WebAssets\WebAssets;

/**
 * The heart of the PhpPlaisio system and parent class for all kernels.
 *
 * Nub:
 * noun. (ˈnʌb) The choicest or most essential or most vital part of some idea or experience.
 *
 * @property-read WebAssets                 $assets                    The helper object for web assets.
 * @property-read Authority                 $authority                 The helper object for authorization.
 * @property-read Babel                     $babel                     The helper object for retrieving linguistic
 *                entities.
 * @property-read BlobStore                 $blobStore                  The the BLOB Store object.
 * @property-read CanonicalHostnameResolver $canonicalHostnameResolver The helper object for deriving the
 *                canonical hostname.
 * @property-read Cgi                       $cgi                       The helper object for Cgi variables.
 * @property-read CompanyResolver           $companyResolver           The helper object for deriving the company.
 * @property-read ConfigVault               $configVault               The configuration vault for storing and
 *                retrieving sensitive configuration data safely.
 * @property-read Dirs                      $dirs                      Helper object for getting directory names.
 * @property-read Object                    $DL                        The data layer generated by PhpStratum.
 * @property-read ErrorLogger               $errorLogger               The error logger.
 * @property-read EventDispatcher           $eventDispatcher           The event dispatcher.
 * @property-read ExceptionHandler          $exceptionHandler          The exception handler.
 * @property-read LanguageResolver          $languageResolver          The helper object for resolving the code of
 *                the language in which the response must be drafted.
 * @property-read LoginHandler              $loginHandler              The login handler for logging in a user agent.
 * @property-read ObfuscatorFactory         $obfuscatorFactory         The factory for creating Obfuscators.
 * @property-read Request                   $request                   The helper object for providing information
 *                about the HTTP request.
 * @property-read RequestHandler            $requestHandler            The helper object for handling the HTTP page
 *                request.
 * @property-read RequestLogger             $requestLogger             The helper object for logging HTTP page requests.
 * @property-read RequestParameterResolver  $requestParameterResolver  The helper object for resolving the CGI
 *                parameters from a clean URL.
 * @property-read Session                   $session                   The helper object for session management.
 */
abstract class Nub
{
  //--------------------------------------------------------------------------------------------------------------------
  /**
   * A reference to the singleton instance of this class.
   *
   * @var Nub
   */
  public static $nub;

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Object constructor.
   */
  protected function __construct()
  {
    self::$nub = $this;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the value of an object property.
   *
   * Do not call this method directly as it is a PHP magic method that
   * will be implicitly called when executing `$value = $object->property;`.
   *
   * @param string $property The name of the property.
   *
   * @return mixed The value of the property.
   *
   * @throws \LogicException If the property is not defined.
   */
  public function __get(string $property)
  {
    $getter = 'get'.ucfirst($property);
    if (method_exists($this, $getter))
    {
      return $this->$property = $this->$getter();
    }

    throw new \LogicException(sprintf('Unknown property %s::%s', __CLASS__, $property));
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Acquires a lock on a database entity and returns the object holding the lock.
   *
   * @param int $nameId   The ID of the name of the entity lock.
   * @param int $entityId The ID of the entity.
   *
   * @return EntityLock
   */
  public function createEntityLock(int $nameId, int $entityId): EntityLock
  {
    unset($nameId);
    unset($entityId);

    throw new \LogicException('Not implemented');
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Creates an empty mail message.
   *
   * @return MailMessage
   */
  public function createMailMessage(): MailMessage
  {
    throw new \LogicException('Not implemented');
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Acquires a named lock and returns the object holding the lock.
   *
   * @param int $id The ID of the named lock.
   *
   * @return NamedLock
   */
  public function createNamedLock(int $id): NamedLock
  {
    unset($id);

    throw new \LogicException('Not implemented');
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * De-obfuscates an obfuscated database ID.
   *
   * @param string|null $code  The obfuscated database ID.
   * @param string      $alias An alias for the column holding the IDs.
   *
   * @return int|null
   */
  public function deObfuscate(?string $code, string $alias): ?int
  {
    return $this->obfuscatorFactory::decode($code, $alias);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns the URL of the login page.
   *
   * @param string|null $redirect After a successful login the user agent must be redirected to this URL.
   *
   * @return string
   */
  public function getLoginUrl(?string $redirect = null): string
  {
    unset($redirect);

    throw new \LogicException('Not implemented');
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Returns an Obfuscator for obfuscating and de-obfuscating database IDs.
   *
   * @param string $alias An alias for the column holding the IDs.
   *
   * @return Obfuscator
   */
  public function getObfuscator(string $alias): Obfuscator
  {
    return $this->obfuscatorFactory::getObfuscator($alias);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Handles the actual page request including authorization and security checking, transaction handling,
   * request logging, and exception handling.
   */
  final public function handlePageRequest(): void
  {
    $this->requestHandler->handleRequest();
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Obfuscates a database ID.
   *
   * @param int|null $id    The database ID.
   * @param string   $alias An alias for the column holding the IDs.
   *
   * @return string
   */
  public function obfuscate(?int $id, string $alias): ?string
  {
    return $this->obfuscatorFactory::encode($id, $alias);
  }

  //--------------------------------------------------------------------------------------------------------------------
}

//----------------------------------------------------------------------------------------------------------------------
